import random 
import time

def percentage(part, whole):
    Percentage = 100 * float(part)/float(whole)
    return str(Percentage) + "%"

main_loop = 1
exit_test_two = 0

print("Hey, —è –ø—Ä–æ–≥—Ä–∞–º–∞, —â–æ —Å–∏–º—É–ª—é—î —Ä–æ–∑–ø–æ–¥—ñ–ª –∫–ª—é—á–∞ –∑–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º BB84")
print("–ù–∞–ø–∏—à—ñ—Ç—å '666' –±—É–¥—å-–∫–æ–ª–∏, —â–æ–± –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é")

cont = 1
while main_loop == 1:
	
	eq_num = 70
	negative_amount = 0
	wrong_chance = 0

	while cont == 1:
		amount_passed, key_amount, zero, one, error_amount, error_check_amount, check_amount, eq_passed  = 0, 0, 0, 0, 0, 0, 0, 0
		key_2_ph_len = 0


		bits_amount = int(input("–°–∫—ñ–ª—å–∫—ñ –±—ñ—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ?: "))
		#bits_amount = 1000                                                                #input
		if bits_amount == 666:
			#exit_test_two = 1
			break
		if bits_amount < 1:
			negative_amount = 1
			break

		#show = int(input("–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –≤—Å—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó? 0 –∞–±–æ 1: "))
		show = 1                                                                          #input

		eve_chance = int(input("–í–≤–µ–¥—ñ—Ç—å —à–≤–∏–¥–∫—ñ—Å—Ç—å –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞ –Ñ–≤–æ—é —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö: "))
		#eve_chance = 60
		if eve_chance == 666:
			#exit_test_two = 1
			break
		if (eve_chance > 100) or (eve_chance < 1):
			wrong_chance = 1
			break


		bob_key=[]
		alice_key=[]

		sec_phase_bob_key = []
		sec_phase_alice_key = []


		delay_enabled = 1                             # DELAY & –î–ï–ö–û–†

		if delay_enabled == 1:
			delay = 0.2
			print("–í–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏", bits_amount, "–±—ñ—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ, –∑–∞—á–µ–∫–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ä–∞—Ö—É–Ω–∫—É...")
			time.sleep(1.5)
			print("–ü–æ—á–∞—Ç–æ–∫ —Å–∏–º—É–ª—è—Ü—ñ—ó...")
			time.sleep(.7)
			print("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤...")
			time.sleep(.7)
		else:
			delay=0



		if show == 1:	
			print("–†–∞–Ω–¥.–±—ñ—Ç |", "–†–∞–Ω–¥.–±–∞–∑–∏—Å |", "–ü–æ–ª—è—Ä.–ê–ª—ñ—Å  |", " –Ñ–≤–∞ |", "–ë–∞–∑–∏—Å.–Ñ–≤–∏ |", "–ü–æ–ª—è—Ä.–Ñ–≤–∏ |" " –ë–∞–∑–∏—Å.–ë–æ–±–∞|", "–ü–æ–ª—è—Ä.–ë–æ–±–∞ |", "–ö–ª—é—á|", "–ü–æ–º–∏–ª–∫–∞"  )


		while amount_passed < bits_amount:                                                #Main block


			key_test_alice = 0
			key_test_bob = 0

			sys_random_bit = random.SystemRandom()
			sys_random_basis = random.SystemRandom()
			random_bit = sys_random_bit.randint(0, 1) #–ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –±—ñ—Ç
			random_basis = sys_random_basis.randint(0, 1) #–ì–µ–Ω–µ—Ä—É—î–º–æ –±–∞–∑–∏—Å: –Ω–µ—Ö–∞–π 0 - –ø—Ä—è–º–æ–ª—ñ–Ω—ñ–π–Ω–∏–π, –∞ 1 - –¥—ñ–∞–≥–æ–Ω–∞–ª—å–Ω–∏–π


			if random_bit == 0: #–í–∏—Ä–∞—Ö—É–≤—É—ç–º–æ –ø–æ–ª—è—Ä–∏–∑–∞—Ü—ñ—é —Ñ–æ—Ç–æ–Ω–∞    {
				if random_basis == 0:
					polarization = "  0¬∞"# ü†ï"
				if random_basis == 1:
					polarization = " 45¬∞"# ‚¨à" 
			elif random_bit == 1:
				if random_basis == 0:
					polarization = " 90¬∞"# ‚ûû"
				if random_basis == 1:
					polarization = "135¬∞"# ‚¨ä"

			if random_basis == 0:
				basis="+"
			elif random_basis == 1:
				basis="x"                                          #}


			sys_eve_check = random.SystemRandom() #–ì–µ–Ω–µ—Ä—É—î–º–æ —á–∏ –±—É–¥–µ –Ñ–≤–∞ –ø–µ—Ä–µ—Ö–æ–ø–ª—é–≤–∞—Ç–∏ —Ñ–æ—Ç–æ–Ω
			eve_check = sys_eve_check.randint(0, 100) 
			#eve_check = 0
			#eve_check = 1
			eve_check_test = 0


			if eve_check <= eve_chance: # –ë–ª–æ–∫ —è–∫—â–æ –Ñ–≤–∞ –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î
				eve_check_test = 1
				sys_eve_random_basis = random.SystemRandom() # –ì–µ–Ω–µ—Ä—É—ç–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –±–∞–∑–∏—Å –Ñ–≤–∏
				eve_random_basis = sys_eve_random_basis.randint(0, 1)
				
				sys_eve_random_wrong_basis = random.SystemRandom() # –ì–µ–Ω–µ—Ä—É—î–º–æ —á–∏—Å–ª–æ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤ –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –±–∞–∑–∏—Å—ñ
				eve_random_wrong_basic = sys_eve_random_wrong_basis.randint(0, 1)		

				if eve_random_basis == 0: # –í–∏—Å—Ç–∞–≤–ª—è—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –±–∞–∑–∏—Å–∞
					eve_basis="+"
				elif eve_random_basis == 1:
					eve_basis="x"

				if eve_random_basis == random_basis: #–ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –±–∞–∑–∏—Å—ñ
					eve_polarization = polarization
				if eve_random_basis != random_basis: #–ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É
					if random_basis == 1:            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–∞–Ω–¥–æ–º–Ω—É –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω—É –ø–æ–ª—è—Ä–∏–∑–∞—Ü—ñ—é
						if eve_random_wrong_basic == 0:
							eve_polarization = "  0¬∞"# ü†ï"
						else:
							eve_polarization = " 90¬∞"# ‚ûû"
					elif random_basis == 0:
						if eve_random_wrong_basic == 1:
							eve_polarization = " 45¬∞"# ‚¨à" 
						else:
							eve_polarization = "135¬∞"# ‚¨ä"

				sys_bob_random_basis = random.SystemRandom() # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è –¥–ª—è –ë–æ–±–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –≤—ñ–¥ –Ñ–≤–∏  {
				bob_random_basis = sys_bob_random_basis.randint(0, 1)
				sys_bob_random_wrong_basis = random.SystemRandom()
				bob_random_wrong_basic = sys_bob_random_wrong_basis.randint(0, 1) 
				if bob_random_basis == 0:
					bob_basis="+"
				elif bob_random_basis == 1:
					bob_basis="x"
				
				if bob_random_basis == eve_random_basis:
					bob_polarization = eve_polarization

				if bob_random_basis != eve_random_basis:
					if eve_random_basis == 1:
						if bob_random_wrong_basic == 0:
							bob_polarization = "  0¬∞"# ü†ï"
						else:
							bob_polarization = " 90¬∞"# ‚ûû"
					elif eve_random_basis == 0:
						if bob_random_wrong_basic == 0: #                    !!!! (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞)
							bob_polarization = " 45¬∞"# ‚¨à" 
						else:
							bob_polarization = "135¬∞"# ‚¨ä"                                                              }
				if bob_random_basis == 0:                             # –í–∏—Ä–∞—Ö–æ–≤—É—î–º–æ –±—ñ—Ç –∑ –ø–æ–ª—è—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –±–∞–∑–∏—Å–∞ 
					if bob_polarization == "  0¬∞":# ü†ï"
						bob_test_random_bit = 0
					elif bob_polarization == " 90¬∞":
						bob_test_random_bit = 1
				if bob_random_basis == 1:
					if bob_polarization == " 45¬∞":# ü†ï"
						bob_test_random_bit = 0
					elif bob_polarization == "135¬∞":
						bob_test_random_bit = 1
				test=0 # –ß–∏ –ø–æ–ø–∞–¥–∞—î –±—ñ—Ç –≤ –∫–ª—é—á
				if bob_random_basis == random_basis:
					test=1
					key_amount = key_amount + 1
					bob_key.append(bob_test_random_bit) 
					alice_key.append(random_bit)
					if bob_test_random_bit == 0: # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –æ–¥–∏–Ω–∏—Ü—å —Ç–∞ –Ω—É–ª—ñ–≤, –ø—Ä–æ—Å—Ç–æ –¥–ª—è –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É
						zero=zero+1
					if bob_test_random_bit == 1:
						one=one+1	
				error = 0 # –ß–∏ —Å—Ö–æ–¥—è—Ç—å—Å—è –±—ñ—Ç–∏, –≤–∏–¥–Ω–æ —Ç—ñ–ª—å–∫–∏ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∏ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á–∞. –ù—ñ—Ö—Ç–æ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Å–∏–º—É–ª—è—Ü—ñ—ó –Ω–µ –∑–Ω–∞—î
				if (test == 1) and (bob_test_random_bit != random_bit):
					error = 1
					error_amount = error_amount + 1 



				if show == 1: #–ü—Ä—ñ–Ω—Ç
					print ("   ", random_bit, "        ", basis, "        ", polarization, "        ", "1", "       ", eve_basis, "       ",eve_polarization, end = " ")
					print("     ", " ", bob_basis, "       ", bob_polarization, end = " ")
					if test == 1:
						print("      ", bob_test_random_bit, end = " ")
					else:
						print("        ", end = " ")
					if error == 1:
						print ("    ", "1")
					else:
						print ("    ", " ")

					

			else: #–ë–ª–æ–∫ –±–µ–∑ –Ñ–≤–∏, –∞–Ω–∞–ª–æ–≥—ñ—á–Ω—ñ –¥—ñ—ó, —Ç—ñ–ª—å–∫–∏ –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è, –Ω–∞–ø—Ä—è–º—É.
				sys_bob_random_basis = random.SystemRandom()
				bob_random_basis = sys_bob_random_basis.randint(0, 1)
				sys_bob_random_wrong_basis = random.SystemRandom()
				bob_random_wrong_basic = sys_bob_random_wrong_basis.randint(0, 1) 
				if bob_random_basis == 0:
					bob_basis="+"
				elif bob_random_basis == 1:
					bob_basis="x"
				test=0
				if bob_random_basis == random_basis:
					bob_polarization = polarization
					test=1
					key_amount = key_amount + 1
					bob_key.append(random_bit) 
					alice_key.append(random_bit)
					if random_bit == 0:
						zero=zero+1
					if random_bit == 1:
						one=one+1	
				if bob_random_basis != random_basis:
					if random_basis == 1:
						if bob_random_wrong_basic == 0:
							bob_polarization = "  0¬∞"# ü†ï"
						else:
							bob_polarization = " 90¬∞"# ‚ûû"
					elif random_basis == 0:
						if bob_random_wrong_basic == 1:
							bob_polarization = " 45¬∞"# ‚¨à" 
						else:
							bob_polarization = "135¬∞"# ‚¨ä"
				if show == 1:
					print ("   ", random_bit, "        ", basis, "        ", polarization, "        ", "0", "        ", "          ", end = " ")
					print("       ", "  ", bob_basis, "       ", bob_polarization, end = " ")
					if test == 1:
						print("      ", random_bit, end = " ")
					else:
						print("        ", end = " ")
					print ("    ", " ")
					
			amount_passed = amount_passed + 1


			bit_check = 0 #–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±—ñ—Ç—ñ–≤ –ø—ñ—Å–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–Ω—è. –ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –ø—ñ—Å–ª—è –≤—Å—å–æ–≥–æ, –∞–ª–µ —Ç—É—Ç –≤—Å–µ –ø–æ —Ä—è–¥–∫–æ–≤–æ, —Ç–æ–º—É –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –±—ñ—Ç–∞.
			if test == 1:
				sys_test_check = random.SystemRandom()
				test_check = sys_test_check.randint(0, 100) #–®–∞–Ω—Å
				if test_check <= 50:
					if eve_check_test == 0:
						bit_check = 0
					if eve_check_test == 1:
						if random_bit == bob_test_random_bit:
							bit_check = 0
						else:
							bit_check = 1
					check_amount = check_amount + 1 

				else:
					if eve_check_test == 0:
						sec_phase_bob_key.append(random_bit)
						key_test_bob = 1

					elif eve_check_test == 1:
						sec_phase_bob_key.append(bob_test_random_bit)
						key_test_bob = 1
					key_2_ph_len += 1
					sec_phase_alice_key.append(random_bit)
					key_test_alice = 1

			
			if False:		
				if key_test_alice == 1:
					print ("    ", "a1")
				else:
					print ("    ", " ")

				if key_test_bob == 1:
					print ("    ", "b1")
				else:
					print ("    ", " ")




			error_check_amount = error_check_amount + bit_check #–†–∞—Ö—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫

			if show == 1:
				time.sleep(delay)
				delay -=0.01
				if delay < 0:
					delay=0


		if (error_amount > 0) and (key_amount > 0):
			precent_error = percentage(error_amount, key_amount)
		else:
			percent_error = 0
		if (error_check_amount > 0) and (check_amount > 0):
			percent_check_error = percentage(error_check_amount, check_amount)
		else:
			percent_check_error = 0

		if delay_enabled == 1:
			time.sleep(.2)

		print("–î–æ–≤–∂–∏–Ω–∞ –∫–ª—é—á–∞ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ—ó —Ñ–∞–∑–∏ –ø—Ä–æ—Å—ñ—é–≤–∞–Ω–Ω—è: ", key_amount)
		print(" ")

		if delay_enabled == 1:
			time.sleep(.2)

		print("–ö–ª—é—á –æ—Ç—Ä–∏–º–∞–Ω–∏–π –ë–æ–±–æ–º: ", *bob_key, sep="")
		print(" ")

		if delay_enabled == 1:
			time.sleep(.2)	

		print("–ö–ª—é—á –∑–≥–µ–Ω–µ—Ä–æ–≤–Ω–∏–π –ê–ª—ñ—Å–æ—é: ", *alice_key, sep="")
		print(" ")


		#print("–°–ø—Ä–∞–≤–∂–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫: ", error_amount)
		#print("–°–ø—Ä–∞–≤–∂–Ω—ñ–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –ø–æ–º–∏–ª–æ–∫: ", precent_error)
		#print(zero, one) 


		if delay_enabled == 1:
			time.sleep(.2)

		print("–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ —Ç–∞ –≤–∏–∫–ª—é—á–µ–Ω–æ –±—ñ—Ç—ñ–≤ –ø—ñ–¥ —á–∞—Å –¥—Ä—É–≥–æ—ó —Ñ–∞–∑–∏ –ø—Ä–æ—Å—ñ—é–≤–∞–Ω–Ω—è: ", check_amount)
		print(" ")

		if delay_enabled == 1:
			time.sleep(.2)

		print("–ü–æ–º–∏–ª–æ–∫ –≤–∏—è–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ: ", error_check_amount)
		print(" ")

		if delay_enabled == 1:
			time.sleep(.2)

		print("–í—ñ–¥—Å–æ—Ç–æ–∫ –ø–æ–º–∏–ª–æ–∫ –≤–∏—è–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ: ", percent_check_error) #–í —Ä–æ–∑—Ä–æ–±—Ü—ñ
		print(" ")

		if delay_enabled == 1:
			time.sleep(.2)

		print("–ö–ª—é—á –ø—ñ—Å–ª—è –¥—Ä—É–≥–æ—ó —Ñ–∞–∑–∏ –ø—Ä–æ—Å—ñ—é–≤–∞–Ω–Ω—è –∞–ª—Å: ", *sec_phase_alice_key, sep="")
		print(" ")

		if delay_enabled == 1:
			time.sleep(.2)
		print("–ö–ª—é—á –ø—ñ—Å–ª—è –¥—Ä—É–≥–æ—ó —Ñ–∞–∑–∏ –ø—Ä–æ—Å—ñ—é–≤–∞–Ω–Ω—è –±–æ–±: ", *sec_phase_bob_key, sep="")
		print(" ")

		if delay_enabled == 1:
			time.sleep(.2)

		print("–î–æ–≤–∂–∏–Ω–∞ –∫–ª—é—á–∞ –ø—ñ—Å–ª—è –¥—Ä—É–≥–æ—ó —Ñ–∞–∑–∏ –ø—Ä–æ—Å—ñ—é–≤–∞–Ω–Ω—è: ", key_2_ph_len)
		print(" ")


		#print("alice: ", *sec_phase_alice_key, sep="")
		#rint("bob:   ", *sec_phase_bob_key, sep="")


		if delay_enabled == 1:
			time.sleep(.2)

		print("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó... ")
		print(" ")

		if delay_enabled == 1:
			time.sleep(.2)


		if False:
			while eq_num > eq_passed:
				print("=", end = "")
				time.sleep(0.001)
				eq_passed += 1

		print(" ")

		cont = int(input("–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é —â–µ —Ä–∞–∑? 0 –∞–±–æ 1: "))
		if cont == 0:
			main_loop = 0
		#cont=0

	if negative_amount == 1:
		while True:
			main_loop = int(input('–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—ñ—Ç—ñ–≤. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é? 0 –∞–±–æ 1:'))
			if main_loop == 666:
				exit_test_two = 1
				break
			if (main_loop == 1) or (main_loop == 0):
				break
	elif wrong_chance == 1:
		while True:
			main_loop = int(input('–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–∞–Ω—Å. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é? 0 –∞–±–æ 1:'))
			if main_loop == 666:
				exit_test_two = 1
				break
			if (main_loop == 1) or (main_loop == 0):
				break
	#if exit_test_two == 1:
		#break
input("–ù–∞—Å—Ç–∏—Å–Ω—ñ—Ç—å 'Enter', —â–æ–± –≤–∏–π—Ç–∏ –∑ —Å–∏–º—É–ª—è—Ü—ñ—ó")
